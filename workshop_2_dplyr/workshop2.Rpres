<style>
.small-code pre code {
  font-size: 1.2em;
}
</style>

Thinking fast with dplyr
========================================================
author: Freddie Sanchez, Galen Long
date: 2016-04-01

Workshop data
========================================================
class: small-code

```{r}
# install.packages("nycflights13")
library(nycflights13) # flights, airports, airlines, planes, weather
flights[1:3,1:8]
names(flights)
nrow(flights)
```

Generate questions
========================================================

Think of 10 *specific*, *testable* questions you have about the Ticketmaster data.

Examples for the flights data:

- Which planes fly the most?
- Do some days of the week have more flights than others?
- Do some carriers have more delays than others on average?
- Do longer flights tend to have more delays?

Organize questions
========================================================

Do some questions seem to be related to each other? Try and group them, and sort them in order of fruitfulness/ease of exploration.

Examples for the flights data:

1. Which planes fly the most?
2. How do the number of flights change over time?
3. Which variables have relationships with delays? Can we predict delays?

dplyr
========================================================

There are five basic functions in dplyr syntax:

- `select()`
- `filter()`
- `arrange()`
- `group_by()`
- `summarize()`

Let's first investigate which planes fly the most.

select()
========================================================
class: small-code

Use `select` to choose columns. Has equivalent `[]` syntax.

```{r}
# install.packages("dplyr")
library(dplyr)

# flights[,c('year', 'month', 'day', 'origin', 'dest')]
select(flights, year, month, day, origin, dest)
```

filter()
========================================================
class: small-code

Use `filter` to select rows. Has equivalent `[]` syntax.

```{r}
# flights[flights$year != 2013,]
filter(flights, year != 2013)
```

Since there's no rows in the data frame, we can infer that the only year in the data is `2013`.

arrange()
========================================================
class: small-code

Use `arrange()` to sort rows by column.

```{r}
flights %>% # pipe data using %>%
  select(year, month, day, arr_delay, origin, dest) %>%
  arrange(-arr_delay)
```

Reminder
========================================================
class: small-code

```{r, eval=FALSE}
select(flights, year, month, day, arr_delay, origin, dest)
filter(flights, year != 2013)
arrange(flights, -arr_delay)
# mutate as date
```