<style>
.small-code pre code {
  font-size: 1.2em;
}
</style>

Introduction to R
========================================================
author: Grace Yoo, Galen Long
date: 2016-04-01
css: style.css 

Installation
========================================================

Google!

Loading data
========================================================
class: small-code

Save and load the data.

```{r}
setwd("/Users/mm40078/Documents/projects/datafest2016/data/")
workshops <- read.csv("workshops.csv", 
                      stringsAsFactors = FALSE, 
                      sep = ",",
                      strip.white = TRUE)
```

You can store it as an `.Rda` to speed up reloading.

```{r}
setwd("/Users/mm40078/Documents/projects/datafest2016/data/")
save(workshops, file = 'workshops.Rda')
load('workshops.Rda') # loads the workshops data frame
```

Look at the whole data frame:

```{r eval=FALSE}
workshops # don't do this with large data!
```

Looking at data
========================================================
class: small-code

The basics:

```{r eval=FALSE}
names(workshops) # column names
nrow(workshops)
ncol(workshops)
```

Looking at subsets:

```{r eval=FALSE}
head(workshops) # first 6 rows
tail(workshops) # last 6 rows
workshops[1,] # 1st row for all columns
workshops[,3] # 3rd column for all rows
workshops$pronouns # column by name
```

How could we look at the last two rows of the `pronouns` and `gender` columns?

Looking at data
========================================================
class: small-code

How could we look at the last two rows of the `pronouns` and `gender` columns?

```{r eval=FALSE}
workshops[5:6, 3:4]
# or...
workshops[(nrow(workshops) - 1):nrow(workshops), 
          c("pronouns", "gender")]
```

How did that last example work?

```{r}
(nrow(workshops) - 1):nrow(workshops) # a list of row numbers
c("pronouns", "gender") # a list of column names
```

Filtering data
========================================================
class: small-code

```{r}
workshops$first_name == "galen"
```

We can use this to filter data.

```{r}
workshops[workshops$first_name == "galen",1:6]
```

Filtering data
========================================================
class: small-code

We can also do this with columns:

```{r}
cols <- c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE) # 4th and 9th column
workshops[,cols]
```

*General principle*: make a vector of booleans with the same length as the number of rows/columns and subset the data frame by that.

Filtering data
========================================================
class: small-code

```{r, eval=FALSE}
# previous example
workshops[workshops$first_name == "galen",1:6]
# operators: ==, !=, <, >, !
```

1. How can we get all rows where the `workshop_code` is `1`?

2. How can we get all rows where the number of pets is greater than 0 *and* the gender is non-male?

3. How can we get all columns with `name` in the column name?

Filtering data
========================================================
class: small-code

1) All rows where the `workshop_code` is `1`.

```{r, eval=FALSE}
workshops[workshops$workshop_code == 1,1:6]
```

2) All rows where `num_pets` > 0 and `gender` is non-male.

```{r, eval=FALSE}
workshops[(workshops$num_pets > 0 
           & ! is.na(workshops$num_pets)
           & workshops$gender != "male")
          ,1:6]
```

3) All columns with `name` in the column name.

```{r, eval=FALSE}
workshops[, grepl("name", names(workshops), ignore.case = TRUE)]
```

What is `grepl`? Try: `?grepl`

Missing values
========================================================
class: small-code

How many missing values are in the `pet_names` column?

```{r}
workshops$pet_names
is.na(workshops$pet_names)
sum(is.na(workshops$pet_names)) # count number of NAs
```

Missing values
========================================================
class: small-code

How can we convert all missing values to `NA`? 

```{r}
workshops$pet_names[2] # this one was converted
workshops$pet_names[3] # but this one's still a string
```

Hint: `?read.csv`

Missing values
========================================================
class: small-code

```{r}
setwd("/Users/mm40078/Documents/projects/datafest2016/data/")
workshops <- read.csv("workshops.csv", 
                      stringsAsFactors = FALSE, 
                      sep = ",",
                      strip.white = TRUE,
                      na.string = c('NA', 'n/a', 
                                    'NULL', '', '<NA>'))
workshops$pet_names
sum(is.na(workshops$pet_names))
```


Saving data
========================================================
class: small-code

```{r}
setwd("/Users/mm40078/Documents/projects/datafest2016/data/")
write.csv(workshops, "workshops_cleaned.csv", 
          row.names = FALSE)
```


Summary statistics
========================================================
class: small-code

Basic summary statistics:

```{r, eval=FALSE}
mean(workshops$num_pets, na.rm = TRUE) # exclude NAs
median(workshops$num_pets, na.rm = TRUE)
min(workshops$num_pets, na.rm = TRUE)
max(workshops$num_pets, na.rm = TRUE)
sum(is.na(workshops$num_pets))
```

```{r}
# does all of the above and more
summary(workshops$num_pets)
```

What about these?

```{r, eval=FALSE}
min(workshops$pet_names, na.rm = TRUE)
max(workshops$pet_names, na.rm = TRUE)
mean(workshops$pet_names, na.rm = TRUE)
```

Summary statistics, categorical variables
========================================================
class: small-code

```{r}
# treat categorical as strings, not numbers
# you can do the opposite with as.numeric()
workshops$workshop_code <- as.character(
  workshops$workshop_code)

unique(workshops$workshop_name)
table(workshops$undergrad[-2]) # exclude row 2
```


Aggregating
========================================================
class: small-code

What is the unit of observation of this data frame?


Aggregating
========================================================
class: small-code

How could we change the unit of observation to "person"?

What would the code look like?

Thank you!
========================================================

Stick around and find out in our next workshop: `Thinking fast with dplyr`.

Github: https://github.com/massmutual/datafest2016

Contact: gyoo, galenlong [at] massmutual [dot] com